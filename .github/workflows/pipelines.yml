name: CI/CD Pipelines

on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14
          cache: yarn
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Run tests
        run: yarn test
  build-tarballs:
    name: Build tarball for ${{ matrix.platform }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - platform: macos
            runner: macos-latest
            prebuiltPlatform: darwin
            prebuiltArchitecture: x64
          - platform: win
            runner: ubuntu-latest
            prebuiltPlatform: win32
            prebuiltArchitecture: x64
            customChromeDownload: true
    env:
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: ${{ matrix.customChromeDownload }}
      npm_config_platform: ${{ matrix.prebuiltPlatform }}
      npm_config_arch: ${{ matrix.prebuiltArchitecture }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14
          cache: yarn
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Build tarball
        run: yarn build --targets ${{ matrix.prebuiltPlatform }}-${{ matrix.prebuiltArchitecture }}
      - name: Upload tarball
        uses: actions/upload-artifact@v2
        with:
          name: wio-tarballs
          path: dist/
  build-installers:
    name: Build installer for ${{ matrix.platform }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - platform: macos
            runner: macos-latest
            prebuiltPlatform: darwin
            prebuiltArchitecture: x64
          - platform: win
            runner: ubuntu-latest
            prebuiltPlatform: win32
            prebuiltArchitecture: x64
            customChromeDownload: true
    env:
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: ${{ matrix.customChromeDownload }}
      npm_config_platform: ${{ matrix.prebuiltPlatform }}
      npm_config_arch: ${{ matrix.prebuiltArchitecture }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14
          cache: yarn
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Install needed build tool for Windows
        if: ${{ matrix.platform == 'win' }}
        run: |
          sudo apt-get update
          sudo apt-get install nsis
      - name: Install Apple certificate for macOS
        if: ${{ matrix.platform == 'macos' }}
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PKGBUILD_PATH=$(which pkgbuild)
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,pkgbuild: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Set OSX_KEYCHAIN environment variable
          echo "OSX_KEYCHAIN=$KEYCHAIN_PATH" >> $GITHUB_ENV
      - name: Build installer
        run: OSX_KEYCHAIN="${{ env.OSX_KEYCHAIN }}" sudo -E yarn build:${{ matrix.platform }}
      - name: Upload installer
        uses: actions/upload-artifact@v2
        with:
          name: wio-${{ matrix.platform }}-installer
          path: |
            dist/macos/wio-*.pkg
            dist/win/wio-*-x64.exe
  publish_to_npm:
    name: Publish to npm
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, build-tarballs, build-installers]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14
          cache: yarn
          registry-url: 'https://registry.npmjs.org'
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Publish to npm
        run: yarn publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  #  publish_to_github_packages:
  #    name: Publish to GitHub packages
  #    if: startsWith(github.ref, 'refs/tags/v')
  #    needs: [ test, build-tarballs, build-installers ]
  #    runs-on: ubuntu-latest
  #    permissions:
  #      contents: read
  #      packages: write
  #    steps:
  #      - name: Checkout repository
  #        uses: actions/checkout@v2
  #      - name: Setup Node.js
  #        uses: actions/setup-node@v2
  #        with:
  #          node-version: 14
  #          cache: yarn
  #          registry-url: 'https://npm.pkg.github.com'
  #          scope: '@igassmann'
  #      - name: Install dependencies
  #        run: yarn install --frozen-lockfile
  #      - name: Publish to GitHub Packages
  #        run: npm publish
  #        env:
  #          NODE_AUTH_TOKEN: ${{ github.token }}
  publish_tarballs:
    name: Publish tarballs
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, build-tarballs, build-installers]
    runs-on: ubuntu-latest
    steps:
      - name: Download previously-built tarballs
        uses: actions/download-artifact@v2
        with:
          name: wio-tarballs
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Copy tarballs to S3
        run: aws s3 sync . s3://web-img-optimizer-releases
  publish_installers:
    name: Publish installer for ${{ matrix.platform }}
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, build-tarballs, build-installers]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [macos, win]
      fail-fast: false
      max-parallel: 1
    steps:
      - name: Download ${{ matrix.platform }} previously-built installer
        uses: actions/download-artifact@v2
        with:
          name: wio-${{ matrix.platform }}-installer
      - name: Upload installer to a GitHub release
        uses: svenstaro/upload-release-action@2.2.1
        with:
          repo_token: ${{ github.token }}
          tag: ${{ github.ref }}
          file: '**/*.{pkg,exe}'
          file_glob: true
          overwrite: true
